options {
    # Working directory where all relative paths start from
    directory "/var/cache/bind";

    # Interfaces and port BIND should listen on for DNS requests
    listen-on port {{ dns_port }}
    {
        127.0.0.1;
        {{ hostvars[groups['dns_master'][0]]['ansible_default_ipv4']['address'] if ansible_hostname == groups['dns_master'][0] else hostvars[groups['dns_slave'][0]]['ansible_default_ipv4']['address'] }};
    };
    # We're not listening for IPv6 requests
    listen-on-v6 { none; };

    # Hide version number from clients for security reasons.
    version "not currently available";
    hostname none;
    server-id none;

    # Forward requests for non-auth domains
    forwarders
    {
        {{ bind9_forward_servers[0] }};
        {{ bind9_forward_servers[1] }};
    };
    
    # Define whoich clients can perform DNS queries
    allow-query { internals; };
    allow-query-cache { internals; };

    # Allow recursion DNS requests for the specified clients
    recursion yes;
    allow-recursion { internals; };

    # Notify name servers in the NS records of changes
    notify yes;
    also-notify { {{ hostvars[groups['dns_slave'][0]]['ansible_default_ipv4']['address'] if ansible_hostname == groups['dns_master'][0] else hostvars[groups['dns_master'][0]]['ansible_default_ipv4']['address'] }}; };

    # Define hosts that are allowed to receive zone transfers
    allow-transfer { {{ hostvars[groups['dns_slave'][0]]['ansible_default_ipv4']['address'] if ansible_hostname == groups['dns_master'][0] else hostvars[groups['dns_master'][0]]['ansible_default_ipv4']['address'] }}; };

    # Only our DHCP/DNS servers are allowed to perform dynamic updates
    allow-update
    {
        localhost;
        {{ hostvars[groups['dns_master'][0]]['ansible_default_ipv4']['address'] }};
        {{ hostvars[groups['dns_slave'][0]]['ansible_default_ipv4']['address'] }};
    };

    # Don't give authoritative NXDOMAIN answer for non-authoritative domains
    auth-nxdomain no;       # conform to RFC1035

    # Don't scan net for changed interfaces
    # From 9.9.5 ARM, disables interfaces scanning to prevent unwanted stop listening.
    interface-interval 0;

    # Flush pending zone writes on exit
    flush-zones-on-shutdown yes;
};

# Define our local networks
acl internals {
    // localhost adapter
    127.0.0.0/8;
    // CIDR for our local networks
    10.0.0.0/8;
};

logging {
    channel default_syslog {
        file "/var/log/bind/bind.log" versions 3 size 5m;
        print-time yes;
        print-category yes;
        print-severity yes;
        severity notice;
        #syslog daemon;
    };
    channel default_debug {
        print-time yes;
        print-category yes;
        print-severity yes;
        syslog daemon;
        severity dynamic;
    };
    category default  { default_syslog; };
    category config   { default_syslog; default_debug; };
    category dispatch { default_syslog; default_debug; };
    category network  { default_syslog; default_debug; };
    category general  { default_syslog; };
};

include "/etc/bind/rndc.key";

# Allow rndc management
controls {
    inet 127.0.0.1 port {{ dns_sync_port }} allow {
        127.0.0.1;
        {{ hostvars[groups['dns_master'][0]]['ansible_default_ipv4']['address'] }};
        {{ hostvars[groups['dns_slave'][0]]['ansible_default_ipv4']['address'] }};
    } keys { "rndc-key"; };
};

# Zone definitions for this DNS server
zone {{ main_domain }} {
{% if ansible_hostname == groups['dns_master'][0] %}
    type master;
    allow-update { key rndc-key; };
    allow-transfer { {{ hostvars[groups['dns_slave'][0]]['ansible_default_ipv4']['address'] }}; };
{% else %}
    type slave;
    masters { {{ hostvars[groups['dns_master'][0]]['ansible_default_ipv4']['address'] }}; };
    allow-update-forwarding { {{ hostvars[groups['dns_master'][0]]['ansible_default_ipv4']['address'] }}; };
{% endif %}
    notify yes;
    file "/var/lib/bind/db.{{ main_domain }}";
    journal "/var/lib/bind/db.{{ main_domain }}.jnl";
};

zone 10.in-addr.arpa {
{% if ansible_hostname == groups['dns_master'][0] %}
    type master;
    allow-update { key rndc-key; };
    allow-transfer { {{ hostvars[groups['dns_slave'][0]]['ansible_default_ipv4']['address'] }}; };
{% else %}
    type slave;
    masters { {{ hostvars[groups['dns_master'][0]]['ansible_default_ipv4']['address'] }}; };
    allow-update-forwarding { {{ hostvars[groups['dns_master'][0]]['ansible_default_ipv4']['address'] }}; };
{% endif %}
    notify yes;
    file "/var/lib/bind/db.{{ main_domain }}.rev";
    journal "/var/lib/bind/db.{{ main_domain }}.rev.jnl";
};

# prime the server with knowledge of the root servers
zone "." {
        type hint;
        file "/usr/share/dns/root.hints";
};

# Be authoritative for the localhost forward and reverse zones, and for broadcast zones as per RFC 1912
zone localhost {
{% if ansible_hostname == groups['dns_master'][0] %}
    type primary;
    allow-update { key rndc-key; };
{% else %}
    type secondary;
    primaries { {{ hostvars[groups['dns_master'][0]]['ansible_default_ipv4']['address'] }}; };
{% endif %}
    file "/etc/bind/db.local";
};

zone 127.in-addr.arpa {
{% if ansible_hostname == groups['dns_master'][0] %}
    type primary;
    allow-update { key rndc-key; };
{% else %}
    type secondary;
    primaries { {{ hostvars[groups['dns_master'][0]]['ansible_default_ipv4']['address'] }}; };
{% endif %}
    file "/etc/bind/db.127";
};

zone 0.in-addr.arpa {
{% if ansible_hostname == groups['dns_master'][0] %}
    type primary;
    allow-update { key rndc-key; };
{% else %}
    type secondary;
    primaries { {{ hostvars[groups['dns_master'][0]]['ansible_default_ipv4']['address'] }}; };
{% endif %}
    file "/etc/bind/db.0";
};

zone 255.in-addr.arpa {
{% if ansible_hostname == groups['dns_master'][0] %}
    type primary;
    allow-update { key rndc-key; };
{% else %}
    type secondary;
    primaries { {{ hostvars[groups['dns_master'][0]]['ansible_default_ipv4']['address'] }}; };
{% endif %}
    file "/etc/bind/db.255";
};